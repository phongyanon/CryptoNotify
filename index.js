const express = require('express');
const app = express();
const port = process.env.HTTP_PORT
const Binance = require('binance-api-node').default
const { GoogleSpreadsheet } = require('google-spreadsheet');
const cron = require('node-cron');
const request = require('request');
const dotenv = require('dotenv');
dotenv.config();

const url_line_notification = "https://notify-api.line.me/api/notify";

// Initialize the sheet - doc ID is the long id in the sheets URL
const doc = new GoogleSpreadsheet(process.env.SHEET_ID);

const client = Binance({
    apiKey: process.env.BINANCE_API_KEY,
    apiSecret: process.env.BINANCE_API_SECRET
})
  
client.time().then(time => console.log(time))

ping = async () => {
    console.log(await client.ping())
}

googleSheetSetup = async () => {
    try {
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
            private_key: process.env.GOOGLE_PRIVATE_KEY,
          });

        await doc.loadInfo(); // loads document properties and worksheets
        console.log(doc.title);
        let sheet = doc.sheetsByIndex[0]
        const rows = await sheet.getRows();
        console.log(rows);
    } catch (err) {
        console.log(err)
    }
}



googleSheetSetup()

// tf
// 1m, 3m, 5m, 15m, 30m, 1h, 2h,
// 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M
getCandles = async (symbol, tf="1h", limit=20) => {
    let candles = await client.futuresCandles({ symbol: symbol, interval: tf, limit: limit })
    console.log(candles)
}

// getCandles('BTCUSDT')

// * * * * * *
// | | | | | |
// | | | | | day of week
// | | | | month
// | | | day of month
// | | hour
// | minute
// second ( optional )

notifyMsg = (msg) => {
    request({
        method: 'POST',
        uri: url_line_notification,
        header: {
            'Content-Type': 'multipart/form-data',
        },
        auth: {
            bearer: process.env.TOKEN,
        },
        form: {
            message: msg
        },
    }, (err, httpResponse, body) => {
        if (err) {
            console.log(err)
        } else {
            console.log(body)
        }
    });
}


// Schedule tasks to be run on the server.
cron.schedule('* * * * *', function() {
    console.log('running a task every minute');
    notifyMsg('test')
});

// app.listen(port, () => {
//     console.log('This server is running on port: ' + port);
// });